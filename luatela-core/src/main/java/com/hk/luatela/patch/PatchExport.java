package com.hk.luatela.patch;

import com.hk.luatela.patch.models.Model;
import com.hk.luatela.patch.models.fields.DataField;
import com.hk.str.HTMLText;

import java.util.*;

import static com.hk.luatela.patch.LuaBase.FULL_FORMAT;

public class PatchExport
{
	private final int patchCount;
	private final PatchComparison comparison;
	private boolean excludeHeader;

	public PatchExport(int patchCount, PatchComparison comparison)
	{
		this.patchCount = patchCount;
		this.comparison = comparison;
	}

	public String getName()
	{
		if(patchCount == 0)
			return "patch-1-initial";
		else
			return "patch-" + (patchCount + 1);
	}

	public PatchExport excludeHeader()
	{
		excludeHeader = true;
		return this;
	}

	public HTMLText toLua(HTMLText txt)
	{
		long time = System.nanoTime();
		int patchNo = patchCount + 1;

		if(!excludeHeader)
		{
			txt.pr("-- Patch #").wr(String.valueOf(patchNo));
			txt.wr(", wrote in ").makeVar("elapsed").wrln("ms");
			txt.prln("-- Generated by Lua Tela on");
			txt.pr("-- ").prln(FULL_FORMAT.format(new Date())).ln();
		}

		txt.pr("if patchNo ~= ").wr(String.valueOf(patchNo)).wrln(" then").tabUp();
		txt.prln("return false");
		txt.tabDown().prln("end");
		txt.prln("patchNo = patchNo + 1").ln();

		if(comparison.addedModels != null && !comparison.addedModels.isEmpty())
		{
			for (Model newModel : comparison.addedModels)
			{
				txt.pr("models['").wr(newModel.name).wrln("'] = {}");
				toLua(txt, newModel.getFields());
			}
			txt.ln();
		}

		if(comparison.removedModels != null && !comparison.removedModels.isEmpty())
		{
			for (Model newModel : comparison.removedModels)
				txt.pr("models['").wr(newModel.name).wrln("'] = nil");
			txt.ln();
		}

		txt.wr("return true");

		txt.setVar("elapsed", String.valueOf((System.nanoTime() - time) / 1000000D));
		return txt;
	}

	private void toLua(HTMLText txt, List<DataField> fields)
	{
		for (DataField field : fields)
		{
			txt.pr("models['").wr(field.parent.name).wr("']['").wr(field.name).wr("'] = { ");
			toLua(txt, field);
			txt.wrln("}");
		}
	}

	private void toLua(HTMLText txt, DataField field)
	{
		txt.wr("'").wr(field.name().substring(7).toLowerCase()).wr("', {");
		Map<String, String> props = field.exportProps(new LinkedHashMap<>());

		Iterator<Map.Entry<String, String>> itr = props.entrySet().iterator();

		while(itr.hasNext())
		{
			Map.Entry<String, String> entry = itr.next();

			txt.wr(entry.getKey()).wr("=").wr(entry.getValue());

			if(itr.hasNext())
				txt.wr(", ");
		}

		txt.wr("} ");
	}
}
